name: MacRDP
on:
  workflow_dispatch:
jobs:
  build:
    name: MacRDP
    runs-on: macos-latest

    steps:
    - name: Install RustDesk
      run: |
        echo "Downloading RustDesk..."
        curl -L -o rustdesk.dmg "https://github.com/rustdesk/rustdesk/releases/latest/download/RustDesk-darwin-x64.dmg"
        if [ $? -ne 0 ]; then
          echo "Failed to download RustDesk DMG."
          exit 1
        fi

        echo "Mounting DMG..."
        hdiutil attach rustdesk.dmg -nobrowse -quiet
        if [ $? -ne 0 ]; then
          echo "Failed to mount RustDesk DMG."
        fi

        echo "Copying RustDesk to Applications..."
        sudo cp -R /Volumes/RustDesk/RustDesk.app /Applications/
        if [ $? -ne 0 ]; then
          echo "Failed to copy RustDesk to Applications."
          exit 1
        fi

        echo "Detaching DMG..."
        hdiutil detach /Volumes/RustDesk -quiet
        if [ $? -ne 0 ]; then
          echo "Failed to detach RustDesk DMG."
          exit 1
        fi

    - name: Setup RustDesk
      run: |
        echo "Starting RustDesk..."
        open -a RustDesk
        if [ $? -ne 0 ]; then
          echo "Failed to start RustDesk."
          exit 1
        fi

        echo "Waiting for RustDesk to initialize..."
        sleep 30  # Adjust if necessary

    - name: Retrieve RustDesk ID
      run: |
        echo "Retrieving RustDesk ID..."
        rustDeskID=$(osascript <<EOF
        tell application "RustDesk"
          activate
          delay 10  # Adjust the delay as needed
          -- Insert code here to interact with RustDesk and retrieve the ID
          set rustDeskID to (do shell script "ps aux | grep RustDesk | grep -v grep | awk '{print $2}'")
          return rustDeskID
        end tell
        EOF
        )
        if [ -z "$rustDeskID" ]; then
          echo "Failed to retrieve RustDesk ID."
          exit 1
        fi
        echo "RustDesk ID: $rustDeskID"
        echo "$rustDeskID" > rustdesk_id.txt

    - name: Send RustDesk ID to Webhook
      env:
        WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
      run: |
        echo "Sending RustDesk ID to webhook..."
        rustDeskID=$(cat rustdesk_id.txt)
        curl -X POST $WEBHOOK_URL \
          -H "Content-Type: application/json" \
          -d '{"message": "➡ SYSTEM MESSAGE ⬅", "rustDeskID": "'"$rustDeskID"'"}'
        if [ $? -ne 0 ]; then
          echo "Failed to send RustDesk ID to webhook."
          exit 1
        fi

    - name: Keep MacOS Runner Active
      run: sleep 3600  # Keeps the runner active for 1 hour; adjust as needed
